○●

○ ● ● ○ ● ○ ○ ○ ○
○ ● ○ ● ● ○ ○ ○ ○
○ ○ ● ● ● ○ ○ ○ ○
○ ○ ● ○ ● ● ○ ○ ○
○ ○ ○ ● ● ● ○ ○ ○
○ ○ ○ ● ● ○ ● ○ ○
○ ○ ○ ○ ● ● ● ○ ○
○ ○ ○ ○ ● ● ○ ● ○
○ ○ ○ ○ ● ○ ● ● ○

○ ● ○ ○ ● ● ○ ○ ○
○ ● ○ ○ ● ○ ● ○ ○
○ ● ○ ○ ● ○ ○ ● ○
○ ○ ● ○ ● ○ ● ○ ○
○ ○ ● ○ ● ○ ○ ● ○
○ ○ ○ ● ● ○ ○ ● ○

○ ○ ● ● ● ○ ● ○ ○ ○ ○ ○ ○
○ ○ ● ● ○ ● ● ○ ○ ○ ○ ○ ○
○ ○ ● ○ ● ● ● ○ ○ ○ ○ ○ ○
○ ○ ○ ● ● ● ● ○ ○ ○ ○ ○ ○
○ ○ ○ ● ● ○ ● ● ○ ○ ○ ○ ○
○ ○ ○ ● ○ ● ● ● ○ ○ ○ ○ ○
○ ○ ○ ○ ● ● ● ● ○ ○ ○ ○ ○
○ ○ ○ ○ ● ● ● ○ ● ○ ○ ○ ○
○ ○ ○ ○ ● ○ ● ● ● ○ ○ ○ ○
○ ○ ○ ○ ○ ● ● ● ● ○ ○ ○ ○
○ ○ ○ ○ ○ ● ● ● ○ ● ○ ○ ○
○ ○ ○ ○ ○ ● ● ○ ● ● ○ ○ ○
○ ○ ○ ○ ○ ○ ● ● ● ● ○ ○ ○
○ ○ ○ ○ ○ ○ ● ● ● ○ ● ○ ○
○ ○ ○ ○ ○ ○ ● ● ○ ● ● ○ ○
○ ○ ○ ○ ○ ○ ● ○ ● ● ● ○ ○
@ = S(f(x))일 때, 

임의의 방향 x에 대하여

■@□□□■
slist는 S(f(x)), S(f(x+1)), S(f(x+2)), S(f(x+3)) 중에 3개를 갖고 있고,
S(f(x-1))과 S(f(x+4))는 없어야한다.
■□@□□■
slist는 S(f(x-1)), S(f(x)), S(f(x+1)), S(f(x+2)) 중에 3개를 갖고 있고,
S(f(x-2))과 S(f(x+3))는 없어야한다.
■□□@□■
slist는 S(f(x-2)), S(f(x-1)), S(f(x)), S(f(x+1)) 중에 3개를 갖고 있고,
S(f(x-3))과 S(f(x+2))는 없어야한다.
■□□□@■
slist는 S(f(x-3)), S(f(x-2)), S(f(x-1)), S(f(x)) 중에 3개를 갖고 있고,
S(f(x-4))과 S(f(x+1))는 없어야한다.

n은 0에서 3까지 증가할 동안,
tmpList에 S(f(x+()))
slist는 S(f(x+(-n))), S(f(x+(1-n))), S(f(x+(2-n))), S(f(x+(3-n))) 중에 3개를 갖고 있고,
S(f(x-(n+1)))과 S(f(x+(4-n)))는 없어야한다.


○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○

Stone s;
List<Stone> slist = s를 포함한 길이 4의 리스트;

public boolean checkThree(slist, dx, dy)

if( //s가 흑일때 ){
   for( //자신이 첫번째인 slist 부터
	자신이 마지막인 slist 까지 ){
      if( //slit안에 3개의 돌이 들어있을 때){
         if( //slist의 양쪽이 비어있을 때){
            return true;
         }
      }
   }
}

public int countThree(slist){
   int count = 0;
   if(checkThree(slist, 1, 0)) count++;
   if(checkThree(slist, 0, 1)) count++;
   if(checkThree(slist, 1, 1)) count++;
   if(checkThree(slist, 1, -1)) count++;
   
   return count;
}

if(int countThree(slist) > 1) //둘 수 없음